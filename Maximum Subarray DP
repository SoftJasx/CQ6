import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    public static List<Integer> maxSubarray(List<Integer> arr) {
        // Edge case: if array is empty
        if (arr == null || arr.isEmpty()) return Arrays.asList(0, 0);
        
        int maxEndingHere = arr.get(0), maxSoFar = arr.get(0);
        int maxSubsequence = arr.get(0) > 0 ? arr.get(0) : 0;
        int maxElement = arr.get(0);
        
        for (int i = 1; i < arr.size(); i++) {
            // For max subarray
            maxEndingHere = Math.max(arr.get(i), maxEndingHere + arr.get(i));
            maxSoFar = Math.max(maxSoFar, maxEndingHere);
            
            // For max subsequence
            if (arr.get(i) > 0) {
                maxSubsequence += arr.get(i);
            }
            
            // Track max element to handle all negative cases
            maxElement = Math.max(maxElement, arr.get(i));
        }
        
        // If all elements are negative, the max subsequence is the max element
        if (maxElement < 0) maxSubsequence = maxElement;
        
        return Arrays.asList(maxSoFar, maxSubsequence);
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                    .map(Integer::parseInt)
                    .collect(toList());

                List<Integer> result = Result.maxSubarray(arr);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
